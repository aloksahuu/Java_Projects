package com.aurionpro.Solution.test;

import java.util.Scanner;

import com.aurionpro.Solution.model.Inventory;

public class GuitarUIHelper {

    public static void searchGuitars(Scanner scanner, Inventory inventory) {
        try {
            System.out.println("\n== Search Guitars (Press Enter to skip any filter) ==");

            // Builder
            Builder[] builders = Builder.values();
            System.out.println("Select Builder:");
            for (int i = 0; i < builders.length; i++) {
                System.out.println((i + 1) + ". " + builders[i]);
            }
            System.out.print("Enter your choice or press Enter to skip: ");
            String builderInput = scanner.nextLine().trim();
            Builder builder = null;
            if (!builderInput.isEmpty()) {
                int builderIndex = Integer.parseInt(builderInput) - 1;
                if (builderIndex >= 0 && builderIndex < builders.length)
                    builder = builders[builderIndex];
            }

            // Model
            Set<String> models = new TreeSet<>();
            for (Guitar g : inventory.getAllGuitars()) {
                models.add(g.getSpec().getModel());
            }
            List<String> modelList = new ArrayList<>(models);
            System.out.println("Select Model:");
            for (int i = 0; i < modelList.size(); i++) {
                System.out.println((i + 1) + ". " + modelList.get(i));
            }
            System.out.print("Enter your choice or press Enter to skip: ");
            String modelInput = scanner.nextLine().trim();
            String model = "";
            if (!modelInput.isEmpty()) {
                int modelIndex = Integer.parseInt(modelInput) - 1;
                if (modelIndex >= 0 && modelIndex < modelList.size())
                    model = modelList.get(modelIndex);
            }

            // Type
            Type[] types = Type.values();
            System.out.println("Select Type:");
            for (int i = 0; i < types.length; i++) {
                System.out.println((i + 1) + ". " + types[i]);
            }
            System.out.print("Enter your choice or press Enter to skip: ");
            String typeInput = scanner.nextLine().trim();
            Type type = null;
            if (!typeInput.isEmpty()) {
                int typeIndex = Integer.parseInt(typeInput) - 1;
                if (typeIndex >= 0 && typeIndex < types.length)
                    type = types[typeIndex];
            }

            // Strings
            System.out.print("Enter number of strings (6, 10, 12) or press Enter to skip: ");
            String stringInput = scanner.nextLine().trim();
            int numStrings = -1;
            if (!stringInput.isEmpty()) numStrings = Integer.parseInt(stringInput);

            // Back wood
            Wood[] woods = Wood.values();
            System.out.println("Select Back Wood:");
            for (int i = 0; i < woods.length; i++) {
                System.out.println((i + 1) + ". " + woods[i]);
            }
            System.out.print("Enter your choice or press Enter to skip: ");
            String backWoodInput = scanner.nextLine().trim();
            Wood backWood = null;
            if (!backWoodInput.isEmpty()) {
                int backIndex = Integer.parseInt(backWoodInput) - 1;
                if (backIndex >= 0 && backIndex < woods.length)
                    backWood = woods[backIndex];
            }

            // Top wood
            System.out.println("Select Top Wood:");
            for (int i = 0; i < woods.length; i++) {
                System.out.println((i + 1) + ". " + woods[i]);
            }
            System.out.print("Enter your choice or press Enter to skip: ");
            String topWoodInput = scanner.nextLine().trim();
            Wood topWood = null;
            if (!topWoodInput.isEmpty()) {
                int topIndex = Integer.parseInt(topWoodInput) - 1;
                if (topIndex >= 0 && topIndex < woods.length)
                    topWood = woods[topIndex];
            }

            List<Guitar> filtered = new ArrayList<>();
            for (Guitar g : inventory.getAllGuitars()) {
                GuitarSpec spec = g.getSpec();
                if ((builder != null && spec.getBuilder() != builder)) continue;
                if (!model.isEmpty() && !spec.getModel().equalsIgnoreCase(model)) continue;
                if (type != null && spec.getType() != type) continue;
                if (numStrings != -1 && spec.getNumString() != numStrings) continue;
                if (backWood != null && spec.getBackWood() != backWood) continue;
                if (topWood != null && spec.getTopWood() != topWood) continue;
                filtered.add(g);
            }

            System.out.println("\nSearch Results:");
            displayGuitars(filtered);

        } catch (Exception e) {
            System.out.println("Error during search. Please try again.");
            sca
