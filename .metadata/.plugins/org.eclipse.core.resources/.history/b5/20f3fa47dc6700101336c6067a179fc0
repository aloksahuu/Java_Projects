package com.aurionpro.Solution.test;

//Enhanced Rick's Guitar Finder System with Menu & Filters

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

import com.aurionpro.Solution.model.Builder;
import com.aurionpro.Solution.model.Guitar;
import com.aurionpro.Solution.model.GuitarSpec;
import com.aurionpro.Solution.model.Inventory;
import com.aurionpro.Solution.model.Type;
import com.aurionpro.Solution.model.Wood;

public class FindGuitarTest{
 public static void main(String[] args) {
     Scanner scanner = new Scanner(System.in);
     Inventory inventory = new Inventory();
     initializeInventory(inventory);

     boolean exit = false;
     System.out.println("\nüé∏ Welcome to Rick's Guitar Inventory System üé∏");

     while (!exit) {
         System.out.println("\n===== Main Menu =====");
         System.out.println("1. Display All Guitars");
         System.out.println("2. Search Guitars with Optional Filters");
         System.out.println("3. Exit");
         System.out.print("Enter your choice: ");

         int choice = scanner.nextInt();
         scanner.nextLine(); // clear newline

         switch (choice) {
             case 1:
                 displayGuitars(inventory.getAllGuitars());
                 break;
             case 2:
                 searchGuitars(scanner, inventory);
                 break;
             case 3:
                 exit = true;
                 System.out.println("\nüëã Exiting system. Have a great day!");
                 break;
             default:
                 System.out.println("‚ùå Invalid choice. Try again.");
         }
     }

     scanner.close();
 }

 private static void searchGuitars(Scanner scanner, Inventory inventory) {
     try {
         System.out.println("\n== Search Guitars (Press Enter to skip any filter) ==");

         // Builder
         Builder[] builders = Builder.values();
         System.out.println("Select Builder:");
         for (int i = 0; i < builders.length; i++) {
             System.out.println((i + 1) + ". " + builders[i]);
         }
         System.out.print("Enter your choice or press Enter to skip: ");
         String builderInput = scanner.nextLine().trim();
         Builder builder = null;
         if (!builderInput.isEmpty()) {
             int builderIndex = Integer.parseInt(builderInput) - 1;
             if (builderIndex >= 0 && builderIndex < builders.length)
                 builder = builders[builderIndex];
         }

         // Model
         Set<String> models = new TreeSet<>();
         for (Guitar g : inventory.getAllGuitars()) {
             models.add(g.getSpec().getModel());
         }
         List<String> modelList = new ArrayList<>(models);
         System.out.println("Select Model:");
         for (int i = 0; i < modelList.size(); i++) {
             System.out.println((i + 1) + ". " + modelList.get(i));
         }
         System.out.print("Enter your choice or press Enter to skip: ");
         String modelInput = scanner.nextLine().trim();
         String model = "";
         if (!modelInput.isEmpty()) {
             int modelIndex = Integer.parseInt(modelInput) - 1;
             if (modelIndex >= 0 && modelIndex < modelList.size())
                 model = modelList.get(modelIndex);
         }

         // Type
         Type[] types = Type.values();
         System.out.println("Select Type:");
         for (int i = 0; i < types.length; i++) {
             System.out.println((i + 1) + ". " + types[i]);
         }
         System.out.print("Enter your choice or press Enter to skip: ");
         String typeInput = scanner.nextLine().trim();
         Type type = null;
         if (!typeInput.isEmpty()) {
             int typeIndex = Integer.parseInt(typeInput) - 1;
             if (typeIndex >= 0 && typeIndex < types.length)
                 type = types[typeIndex];
         }

         // Strings
         System.out.print("Enter number of strings (6, 10, 12) or press Enter to skip: ");
         String stringInput = scanner.nextLine().trim();
         int numStrings = -1;
         if (!stringInput.isEmpty()) numStrings = Integer.parseInt(stringInput);

         // Back wood
         Wood[] woods = Wood.values();
         System.out.println("Select Back Wood:");
         for (int i = 0; i < woods.length; i++) {
             System.out.println((i + 1) + ". " + woods[i]);
         }
         System.out.print("Enter your choice or press Enter to skip: ");
         String backWoodInput = scanner.nextLine().trim();
         Wood backWood = null;
         if (!backWoodInput.isEmpty()) {
             int backIndex = Integer.parseInt(backWoodInput) - 1;
             if (backIndex >= 0 && backIndex < woods.length)
                 backWood = woods[backIndex];
         }

         // Top wood
         System.out.println("Select Top Wood:");
         for (int i = 0; i < woods.length; i++) {
             System.out.println((i + 1) + ". " + woods[i]);
         }
         System.out.print("Enter your choice or press Enter to skip: ");
         String topWoodInput = scanner.nextLine().trim();
         Wood topWood = null;
         if (!topWoodInput.isEmpty()) {
             int topIndex = Integer.parseInt(topWoodInput) - 1;
             if (topIndex >= 0 && topIndex < woods.length)
                 topWood = woods[topIndex];
         }

         List<Guitar> filtered = new ArrayList<>();
         for (Guitar g : inventory.getAllGuitars()) {
             GuitarSpec spec = g.getSpec();
             if ((builder != null && spec.getBuilder() != builder)) continue;
             if (!model.isEmpty() && !spec.getModel().equalsIgnoreCase(model)) continue;
             if (type != null && spec.getType() != type) continue;
             if (numStrings != -1 && spec.getNumString() != numStrings) continue;
             if (backWood != null && spec.getBackWood() != backWood) continue;
             if (topWood != null && spec.getTopWood() != topWood) continue;
             filtered.add(g);
         }

         System.out.println("\nüîç Matching Guitars:");
         displayGuitars(filtered);

     } catch (Exception e) {
         System.out.println("‚ùå Error during search. Please try again.");
         scanner.nextLine();
     }
 }

 private static void displayGuitars(List<Guitar> guitars) {
     if (guitars.isEmpty()) {
         System.out.println("No guitars found.");
         return;
     }

     System.out.printf("%-8s %-10s %-15s %-10s %-10s %-15s %-15s %-10s\n",
             "Serial", "Builder", "Model", "Type", "Strings", "Back Wood", "Top Wood", "Price");
     System.out.println("=".repeat(90));
     NumberFormat nf = NumberFormat.getCurrencyInstance(new Locale("en", "IN"));
     for (Guitar g : guitars) {
         GuitarSpec s = g.getSpec();
         System.out.printf("%-8s %-10s %-15s %-10s %-10d %-15s %-15s %-10s\n",
                 g.getSerialNumber(),
                 s.getBuilder(),
                 s.getModel(),
                 s.getType(),
                 s.getNumString(),
                 s.getBackWood(),
                 s.getTopWood(),
                 nf.format(g.getPrice()));
     }
 }

 private static void initializeInventory(Inventory inventory) {
     inventory.addGuitar("F001", 14999.95, Builder.FENDER, "Stratocastor", Type.ELECTRIC, 12, Wood.ALDER, Wood.ALDER);
     inventory.addGuitar("F002", 13999.95, Builder.FENDER, "Stratocastor", Type.ELECTRIC, 6, Wood.MAPLE, Wood.ALDER);
     inventory.addGuitar("F003", 13499.95, Builder.FENDER, "Jazzmaster", Type.ELECTRIC, 6, Wood.MAPLE, Wood.CEDAR);
     inventory.addGuitar("G001", 15499.95, Builder.GIBSON, "Les Paul", Type.ELECTRIC, 6, Wood.MAHOGANY, Wood.MAPLE);
     inventory.addGuitar("G002", 16999.00, Builder.GIBSON, "Explorer", Type.ELECTRIC, 6, Wood.MAHOGANY, Wood.MAHOGANY);
     inventory.addGuitar("M001", 11999.00, Builder.MARTIN, "D-28", Type.ACOUSTIC, 6, Wood.BRAZILIAN_ROSEWOOD, Wood.ADIRONDACK);
     inventory.addGuitar("M002", 12499.00, Builder.MARTIN, "LX1", Type.ACOUSTIC, 6, Wood.MAPLE, Wood.CEDAR);
     inventory.addGuitar("C001", 13499.95, Builder.COLLINGS, "C10", Type.ACOUSTIC, 6, Wood.CEDAR, Wood.CEDAR);
     inventory.addGuitar("R001", 17499.00, Builder.RYAN, "Nightingale", Type.ACOUSTIC, 12, Wood.INDIAN_ROSEWOOD, Wood.SITKA);
     inventory.addGuitar("P001", 19999.00, Builder.PRS, "Custom 24", Type.ELECTRIC, 6, Wood.MAPLE, Wood.COCOBOLO);
 }
}