package com.aurionpro.Solution.test;

//Enhanced Rick's Guitar Finder System with Menu & Filters

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;

import com.aurionpro.Solution.model.Builder;
import com.aurionpro.Solution.model.Guitar;
import com.aurionpro.Solution.model.GuitarSpec;
import com.aurionpro.Solution.model.Inventory;
import com.aurionpro.Solution.model.Type;
import com.aurionpro.Solution.model.Wood;

public class FindGuitarTest {
 public static void main(String[] args) {
     Scanner scanner = new Scanner(System.in);
     Inventory inventory = new Inventory();
     initializeInventory(inventory);

     boolean exit = false;
     System.out.println("\nüé∏ Welcome to Rick's Guitar Inventory System üé∏");

     while (!exit) {
         System.out.println("\n===== Main Menu =====");
         System.out.println("1. Search Guitars by Specification");
         System.out.println("2. Display All Guitars");
         System.out.println("3. Filter Guitars by Builder");
         System.out.println("4. Exit");
         System.out.print("Enter your choice: ");

         int choice = scanner.nextInt();
         scanner.nextLine(); // clear newline

         switch (choice) {
             case 1:
                 searchGuitars(scanner, inventory);
                 break;
             case 2:
                 displayGuitars(inventory.getAllGuitars());
                 break;
             case 3:
                 filterByBuilder(scanner, inventory);
                 break;
             case 4:
                 exit = true;
                 System.out.println("\nüëã Exiting system. Have a great day!");
                 break;
             default:
                 System.out.println("‚ùå Invalid choice. Try again.");
         }
     }

     scanner.close();
 }

 private static void searchGuitars(Scanner scanner, Inventory inventory) {
     try {
         System.out.println("\n== Search Guitars by Specification ==");

         Builder[] builders = Builder.values();
         for (int i = 0; i < builders.length; i++)
             System.out.println((i + 1) + ". " + builders[i]);
         System.out.print("Choose builder: ");
         Builder builder = builders[scanner.nextInt() - 1];

         scanner.nextLine();
         System.out.print("Enter model name: ");
         String model = scanner.nextLine().trim();

         Type[] types = Type.values();
         for (int i = 0; i < types.length; i++)
             System.out.println((i + 1) + ". " + types[i]);
         System.out.print("Choose type: ");
         Type type = types[scanner.nextInt() - 1];

         System.out.print("Enter number of strings (6, 10, 12): ");
         int numStrings = scanner.nextInt();

         Wood[] woods = Wood.values();
         for (int i = 0; i < woods.length; i++)
             System.out.println((i + 1) + ". " + woods[i]);
         System.out.print("Choose back wood: ");
         Wood backWood = woods[scanner.nextInt() - 1];

         System.out.print("Choose top wood: ");
         Wood topWood = woods[scanner.nextInt() - 1];

         GuitarSpec spec = new GuitarSpec(builder, model, type, numStrings, backWood, topWood);
         List<Guitar> results = inventory.search(spec);
         System.out.println("\nüîç Matching Guitars:");
         displayGuitars(results);

     } catch (Exception e) {
         System.out.println("‚ùå Error during search. Please follow options properly.");
         scanner.nextLine();
     }
 }

 private static void displayGuitars(List<Guitar> guitars) {
     if (guitars.isEmpty()) {
         System.out.println("No guitars found.");
         return;
     }

     System.out.printf("%-8s %-10s %-15s %-10s %-10s %-15s %-15s %-10s\n",
             "Serial", "Builder", "Model", "Type", "Strings", "Back Wood", "Top Wood", "Price");
     System.out.println("=".repeat(90));
     NumberFormat nf = NumberFormat.getCurrencyInstance(new Locale("en", "IN"));
     for (Guitar g : guitars) {
         GuitarSpec s = g.getSpec();
         System.out.printf("%-8s %-10s %-15s %-10s %-10d %-15s %-15s %-10s\n",
                 g.getSerialNumber(),
                 s.getBuilder(),
                 s.getModel(),
                 s.getType(),
                 s.getNumString(),
                 s.getBackWood(),
                 s.getTopWood(),
                 nf.format(g.getPrice()));
     }
 }

 private static void filterByBuilder(Scanner scanner, Inventory inventory) {
     try {
         System.out.println("\n== Filter by Builder ==");
         Builder[] builders = Builder.values();
         for (int i = 0; i < builders.length; i++)
             System.out.println((i + 1) + ". " + builders[i]);
         System.out.print("Choose builder: ");
         Builder builder = builders[scanner.nextInt() - 1];

         List<Guitar> filtered = new ArrayList<>();
         for (Guitar g : inventory.getAllGuitars()) {
             if (g.getSpec().getBuilder() == builder)
                 filtered.add(g);
         }
         System.out.println("\nüéØ Guitars from Builder: " + builder);
         displayGuitars(filtered);

     } catch (Exception e) {
         System.out.println("‚ùå Invalid input. Returning to menu.");
         scanner.nextLine();
     }
 }

 private static void initializeInventory(Inventory inventory) {
     inventory.addGuitar("F001", 14999.95, Builder.FENDER, "Stratocastor", Type.ELECTRIC, 12, Wood.ALDER, Wood.ALDER);
     inventory.addGuitar("F002", 13999.95, Builder.FENDER, "Stratocastor", Type.ELECTRIC, 6, Wood.MAPLE, Wood.ALDER);
     inventory.addGuitar("G001", 15499.95, Builder.GIBSON, "Les Paul", Type.ELECTRIC, 6, Wood.MAHOGANY, Wood.MAPLE);
     inventory.addGuitar("M001", 11999.00, Builder.MARTIN, "D-28", Type.ACOUSTIC, 6, Wood.BRAZILIAN_ROSEWOOD, Wood.ADIRONDACK);
     inventory.addGuitar("C001", 13499.95, Builder.COLLINGS, "C10", Type.ACOUSTIC, 6, Wood.CEDAR, Wood.CEDAR);
     inventory.addGuitar("R001", 17499.00, Builder.RYAN, "Nightingale", Type.ACOUSTIC, 12, Wood.INDIAN_ROSEWOOD, Wood.SITKA);
 }
}

